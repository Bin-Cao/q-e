!WARNING: THIS FILE IS AUTOMATICALLY GENERATED BY generate_debug.fh.py

subroutine checkpoint_complex_4_0( arr, file, line)
complex(kind=4), intent(in) :: arr
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
complex(kind=4), allocatable :: arr_
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
real(kind=dp) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading complex(kind=4)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = real((abs(arr_-arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = real((abs(arr_-arr)),kind=dp)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = real((abs(arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing complex(kind=4)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_complex_4_1( arr, file, line)
complex(kind=4), intent(in) :: arr(:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
complex(kind=4), allocatable :: arr_(:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
real(kind=dp) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading complex(kind=4)(:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = real(sum(abs(arr_-arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = real(maxval(abs(arr_-arr)),kind=dp)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = real(sum(abs(arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing complex(kind=4)(:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_complex_4_2( arr, file, line)
complex(kind=4), intent(in) :: arr(:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
complex(kind=4), allocatable :: arr_(:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
real(kind=dp) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading complex(kind=4)(:,:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = real(sum(abs(arr_-arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = real(maxval(abs(arr_-arr)),kind=dp)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = real(sum(abs(arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing complex(kind=4)(:,:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_complex_4_3( arr, file, line)
complex(kind=4), intent(in) :: arr(:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
complex(kind=4), allocatable :: arr_(:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
real(kind=dp) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading complex(kind=4)(:,:,:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = real(sum(abs(arr_-arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = real(maxval(abs(arr_-arr)),kind=dp)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = real(sum(abs(arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing complex(kind=4)(:,:,:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_complex_4_4( arr, file, line)
complex(kind=4), intent(in) :: arr(:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
complex(kind=4), allocatable :: arr_(:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
real(kind=dp) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading complex(kind=4)(:,:,:,:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = real(sum(abs(arr_-arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = real(maxval(abs(arr_-arr)),kind=dp)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = real(sum(abs(arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing complex(kind=4)(:,:,:,:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_complex_4_5( arr, file, line)
complex(kind=4), intent(in) :: arr(:,:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
complex(kind=4), allocatable :: arr_(:,:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
real(kind=dp) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading complex(kind=4)(:,:,:,:,:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = real(sum(abs(arr_-arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = real(maxval(abs(arr_-arr)),kind=dp)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = real(sum(abs(arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing complex(kind=4)(:,:,:,:,:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_complex_4_6( arr, file, line)
complex(kind=4), intent(in) :: arr(:,:,:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
complex(kind=4), allocatable :: arr_(:,:,:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
real(kind=dp) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading complex(kind=4)(:,:,:,:,:,:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = real(sum(abs(arr_-arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = real(maxval(abs(arr_-arr)),kind=dp)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = real(sum(abs(arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing complex(kind=4)(:,:,:,:,:,:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_complex_4_7( arr, file, line)
complex(kind=4), intent(in) :: arr(:,:,:,:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
complex(kind=4), allocatable :: arr_(:,:,:,:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
real(kind=dp) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading complex(kind=4)(:,:,:,:,:,:,:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = real(sum(abs(arr_-arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = real(maxval(abs(arr_-arr)),kind=dp)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = real(sum(abs(arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing complex(kind=4)(:,:,:,:,:,:,:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_complex_8_0( arr, file, line)
complex(kind=8), intent(in) :: arr
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
complex(kind=8), allocatable :: arr_
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
real(kind=dp) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading complex(kind=8)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = real((abs(arr_-arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = real((abs(arr_-arr)),kind=dp)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = real((abs(arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing complex(kind=8)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_complex_8_1( arr, file, line)
complex(kind=8), intent(in) :: arr(:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
complex(kind=8), allocatable :: arr_(:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
real(kind=dp) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading complex(kind=8)(:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = real(sum(abs(arr_-arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = real(maxval(abs(arr_-arr)),kind=dp)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = real(sum(abs(arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing complex(kind=8)(:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_complex_8_2( arr, file, line)
complex(kind=8), intent(in) :: arr(:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
complex(kind=8), allocatable :: arr_(:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
real(kind=dp) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading complex(kind=8)(:,:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = real(sum(abs(arr_-arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = real(maxval(abs(arr_-arr)),kind=dp)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = real(sum(abs(arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing complex(kind=8)(:,:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_complex_8_3( arr, file, line)
complex(kind=8), intent(in) :: arr(:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
complex(kind=8), allocatable :: arr_(:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
real(kind=dp) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading complex(kind=8)(:,:,:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = real(sum(abs(arr_-arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = real(maxval(abs(arr_-arr)),kind=dp)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = real(sum(abs(arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing complex(kind=8)(:,:,:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_complex_8_4( arr, file, line)
complex(kind=8), intent(in) :: arr(:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
complex(kind=8), allocatable :: arr_(:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
real(kind=dp) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading complex(kind=8)(:,:,:,:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = real(sum(abs(arr_-arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = real(maxval(abs(arr_-arr)),kind=dp)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = real(sum(abs(arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing complex(kind=8)(:,:,:,:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_complex_8_5( arr, file, line)
complex(kind=8), intent(in) :: arr(:,:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
complex(kind=8), allocatable :: arr_(:,:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
real(kind=dp) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading complex(kind=8)(:,:,:,:,:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = real(sum(abs(arr_-arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = real(maxval(abs(arr_-arr)),kind=dp)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = real(sum(abs(arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing complex(kind=8)(:,:,:,:,:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_complex_8_6( arr, file, line)
complex(kind=8), intent(in) :: arr(:,:,:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
complex(kind=8), allocatable :: arr_(:,:,:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
real(kind=dp) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading complex(kind=8)(:,:,:,:,:,:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = real(sum(abs(arr_-arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = real(maxval(abs(arr_-arr)),kind=dp)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = real(sum(abs(arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing complex(kind=8)(:,:,:,:,:,:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_complex_8_7( arr, file, line)
complex(kind=8), intent(in) :: arr(:,:,:,:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
complex(kind=8), allocatable :: arr_(:,:,:,:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
real(kind=dp) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading complex(kind=8)(:,:,:,:,:,:,:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = real(sum(abs(arr_-arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = real(maxval(abs(arr_-arr)),kind=dp)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = real(sum(abs(arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing complex(kind=8)(:,:,:,:,:,:,:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_real_4_0( arr, file, line)
real(kind=4), intent(in) :: arr
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
real(kind=4), allocatable :: arr_
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
real(kind=dp) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading real(kind=4)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = real((abs(arr_-arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = real((abs(arr_-arr)),kind=dp)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = real((abs(arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing real(kind=4)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_real_4_1( arr, file, line)
real(kind=4), intent(in) :: arr(:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
real(kind=4), allocatable :: arr_(:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
real(kind=dp) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading real(kind=4)(:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = real(sum(abs(arr_-arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = real(maxval(abs(arr_-arr)),kind=dp)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = real(sum(abs(arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing real(kind=4)(:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_real_4_2( arr, file, line)
real(kind=4), intent(in) :: arr(:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
real(kind=4), allocatable :: arr_(:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
real(kind=dp) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading real(kind=4)(:,:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = real(sum(abs(arr_-arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = real(maxval(abs(arr_-arr)),kind=dp)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = real(sum(abs(arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing real(kind=4)(:,:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_real_4_3( arr, file, line)
real(kind=4), intent(in) :: arr(:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
real(kind=4), allocatable :: arr_(:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
real(kind=dp) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading real(kind=4)(:,:,:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = real(sum(abs(arr_-arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = real(maxval(abs(arr_-arr)),kind=dp)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = real(sum(abs(arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing real(kind=4)(:,:,:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_real_4_4( arr, file, line)
real(kind=4), intent(in) :: arr(:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
real(kind=4), allocatable :: arr_(:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
real(kind=dp) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading real(kind=4)(:,:,:,:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = real(sum(abs(arr_-arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = real(maxval(abs(arr_-arr)),kind=dp)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = real(sum(abs(arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing real(kind=4)(:,:,:,:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_real_4_5( arr, file, line)
real(kind=4), intent(in) :: arr(:,:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
real(kind=4), allocatable :: arr_(:,:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
real(kind=dp) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading real(kind=4)(:,:,:,:,:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = real(sum(abs(arr_-arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = real(maxval(abs(arr_-arr)),kind=dp)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = real(sum(abs(arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing real(kind=4)(:,:,:,:,:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_real_4_6( arr, file, line)
real(kind=4), intent(in) :: arr(:,:,:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
real(kind=4), allocatable :: arr_(:,:,:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
real(kind=dp) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading real(kind=4)(:,:,:,:,:,:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = real(sum(abs(arr_-arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = real(maxval(abs(arr_-arr)),kind=dp)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = real(sum(abs(arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing real(kind=4)(:,:,:,:,:,:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_real_4_7( arr, file, line)
real(kind=4), intent(in) :: arr(:,:,:,:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
real(kind=4), allocatable :: arr_(:,:,:,:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
real(kind=dp) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading real(kind=4)(:,:,:,:,:,:,:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = real(sum(abs(arr_-arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = real(maxval(abs(arr_-arr)),kind=dp)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = real(sum(abs(arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing real(kind=4)(:,:,:,:,:,:,:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_real_8_0( arr, file, line)
real(kind=8), intent(in) :: arr
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
real(kind=8), allocatable :: arr_
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
real(kind=dp) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading real(kind=8)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = real((abs(arr_-arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = real((abs(arr_-arr)),kind=dp)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = real((abs(arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing real(kind=8)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_real_8_1( arr, file, line)
real(kind=8), intent(in) :: arr(:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
real(kind=8), allocatable :: arr_(:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
real(kind=dp) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading real(kind=8)(:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = real(sum(abs(arr_-arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = real(maxval(abs(arr_-arr)),kind=dp)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = real(sum(abs(arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing real(kind=8)(:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_real_8_2( arr, file, line)
real(kind=8), intent(in) :: arr(:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
real(kind=8), allocatable :: arr_(:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
real(kind=dp) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading real(kind=8)(:,:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = real(sum(abs(arr_-arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = real(maxval(abs(arr_-arr)),kind=dp)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = real(sum(abs(arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing real(kind=8)(:,:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_real_8_3( arr, file, line)
real(kind=8), intent(in) :: arr(:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
real(kind=8), allocatable :: arr_(:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
real(kind=dp) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading real(kind=8)(:,:,:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = real(sum(abs(arr_-arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = real(maxval(abs(arr_-arr)),kind=dp)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = real(sum(abs(arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing real(kind=8)(:,:,:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_real_8_4( arr, file, line)
real(kind=8), intent(in) :: arr(:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
real(kind=8), allocatable :: arr_(:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
real(kind=dp) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading real(kind=8)(:,:,:,:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = real(sum(abs(arr_-arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = real(maxval(abs(arr_-arr)),kind=dp)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = real(sum(abs(arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing real(kind=8)(:,:,:,:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_real_8_5( arr, file, line)
real(kind=8), intent(in) :: arr(:,:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
real(kind=8), allocatable :: arr_(:,:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
real(kind=dp) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading real(kind=8)(:,:,:,:,:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = real(sum(abs(arr_-arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = real(maxval(abs(arr_-arr)),kind=dp)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = real(sum(abs(arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing real(kind=8)(:,:,:,:,:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_real_8_6( arr, file, line)
real(kind=8), intent(in) :: arr(:,:,:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
real(kind=8), allocatable :: arr_(:,:,:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
real(kind=dp) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading real(kind=8)(:,:,:,:,:,:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = real(sum(abs(arr_-arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = real(maxval(abs(arr_-arr)),kind=dp)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = real(sum(abs(arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing real(kind=8)(:,:,:,:,:,:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_real_8_7( arr, file, line)
real(kind=8), intent(in) :: arr(:,:,:,:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
real(kind=8), allocatable :: arr_(:,:,:,:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
real(kind=dp) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading real(kind=8)(:,:,:,:,:,:,:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = real(sum(abs(arr_-arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = real(maxval(abs(arr_-arr)),kind=dp)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = real(sum(abs(arr)),kind=dp)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing real(kind=8)(:,:,:,:,:,:,:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_integer_4_0( arr, file, line)
integer(kind=4), intent(in) :: arr
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
integer(kind=4), allocatable :: arr_
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
integer(kind=i4b) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading integer(kind=4)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = int((abs(arr_-arr)),kind=i4b)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = int((abs(arr_-arr)),kind=i4b)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = int((abs(arr)),kind=i4b)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing integer(kind=4)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_integer_4_1( arr, file, line)
integer(kind=4), intent(in) :: arr(:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
integer(kind=4), allocatable :: arr_(:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
integer(kind=i4b) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading integer(kind=4)(:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = int(sum(abs(arr_-arr)),kind=i4b)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = int(maxval(abs(arr_-arr)),kind=i4b)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = int(sum(abs(arr)),kind=i4b)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing integer(kind=4)(:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_integer_4_2( arr, file, line)
integer(kind=4), intent(in) :: arr(:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
integer(kind=4), allocatable :: arr_(:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
integer(kind=i4b) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading integer(kind=4)(:,:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = int(sum(abs(arr_-arr)),kind=i4b)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = int(maxval(abs(arr_-arr)),kind=i4b)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = int(sum(abs(arr)),kind=i4b)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing integer(kind=4)(:,:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_integer_4_3( arr, file, line)
integer(kind=4), intent(in) :: arr(:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
integer(kind=4), allocatable :: arr_(:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
integer(kind=i4b) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading integer(kind=4)(:,:,:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = int(sum(abs(arr_-arr)),kind=i4b)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = int(maxval(abs(arr_-arr)),kind=i4b)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = int(sum(abs(arr)),kind=i4b)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing integer(kind=4)(:,:,:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_integer_4_4( arr, file, line)
integer(kind=4), intent(in) :: arr(:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
integer(kind=4), allocatable :: arr_(:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
integer(kind=i4b) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading integer(kind=4)(:,:,:,:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = int(sum(abs(arr_-arr)),kind=i4b)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = int(maxval(abs(arr_-arr)),kind=i4b)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = int(sum(abs(arr)),kind=i4b)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing integer(kind=4)(:,:,:,:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_integer_4_5( arr, file, line)
integer(kind=4), intent(in) :: arr(:,:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
integer(kind=4), allocatable :: arr_(:,:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
integer(kind=i4b) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading integer(kind=4)(:,:,:,:,:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = int(sum(abs(arr_-arr)),kind=i4b)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = int(maxval(abs(arr_-arr)),kind=i4b)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = int(sum(abs(arr)),kind=i4b)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing integer(kind=4)(:,:,:,:,:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_integer_4_6( arr, file, line)
integer(kind=4), intent(in) :: arr(:,:,:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
integer(kind=4), allocatable :: arr_(:,:,:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
integer(kind=i4b) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading integer(kind=4)(:,:,:,:,:,:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = int(sum(abs(arr_-arr)),kind=i4b)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = int(maxval(abs(arr_-arr)),kind=i4b)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = int(sum(abs(arr)),kind=i4b)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing integer(kind=4)(:,:,:,:,:,:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_integer_4_7( arr, file, line)
integer(kind=4), intent(in) :: arr(:,:,:,:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
integer(kind=4), allocatable :: arr_(:,:,:,:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
integer(kind=i4b) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading integer(kind=4)(:,:,:,:,:,:,:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = int(sum(abs(arr_-arr)),kind=i4b)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = int(maxval(abs(arr_-arr)),kind=i4b)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = int(sum(abs(arr)),kind=i4b)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing integer(kind=4)(:,:,:,:,:,:,:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_integer_8_0( arr, file, line)
integer(kind=8), intent(in) :: arr
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
integer(kind=8), allocatable :: arr_
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
integer(kind=i4b) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading integer(kind=8)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = int((abs(arr_-arr)),kind=i4b)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = int((abs(arr_-arr)),kind=i4b)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = int((abs(arr)),kind=i4b)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing integer(kind=8)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_integer_8_1( arr, file, line)
integer(kind=8), intent(in) :: arr(:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
integer(kind=8), allocatable :: arr_(:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
integer(kind=i4b) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading integer(kind=8)(:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = int(sum(abs(arr_-arr)),kind=i4b)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = int(maxval(abs(arr_-arr)),kind=i4b)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = int(sum(abs(arr)),kind=i4b)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing integer(kind=8)(:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_integer_8_2( arr, file, line)
integer(kind=8), intent(in) :: arr(:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
integer(kind=8), allocatable :: arr_(:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
integer(kind=i4b) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading integer(kind=8)(:,:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = int(sum(abs(arr_-arr)),kind=i4b)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = int(maxval(abs(arr_-arr)),kind=i4b)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = int(sum(abs(arr)),kind=i4b)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing integer(kind=8)(:,:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_integer_8_3( arr, file, line)
integer(kind=8), intent(in) :: arr(:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
integer(kind=8), allocatable :: arr_(:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
integer(kind=i4b) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading integer(kind=8)(:,:,:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = int(sum(abs(arr_-arr)),kind=i4b)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = int(maxval(abs(arr_-arr)),kind=i4b)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = int(sum(abs(arr)),kind=i4b)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing integer(kind=8)(:,:,:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_integer_8_4( arr, file, line)
integer(kind=8), intent(in) :: arr(:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
integer(kind=8), allocatable :: arr_(:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
integer(kind=i4b) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading integer(kind=8)(:,:,:,:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = int(sum(abs(arr_-arr)),kind=i4b)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = int(maxval(abs(arr_-arr)),kind=i4b)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = int(sum(abs(arr)),kind=i4b)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing integer(kind=8)(:,:,:,:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_integer_8_5( arr, file, line)
integer(kind=8), intent(in) :: arr(:,:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
integer(kind=8), allocatable :: arr_(:,:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
integer(kind=i4b) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading integer(kind=8)(:,:,:,:,:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = int(sum(abs(arr_-arr)),kind=i4b)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = int(maxval(abs(arr_-arr)),kind=i4b)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = int(sum(abs(arr)),kind=i4b)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing integer(kind=8)(:,:,:,:,:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_integer_8_6( arr, file, line)
integer(kind=8), intent(in) :: arr(:,:,:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
integer(kind=8), allocatable :: arr_(:,:,:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
integer(kind=i4b) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading integer(kind=8)(:,:,:,:,:,:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = int(sum(abs(arr_-arr)),kind=i4b)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = int(maxval(abs(arr_-arr)),kind=i4b)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = int(sum(abs(arr)),kind=i4b)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing integer(kind=8)(:,:,:,:,:,:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_integer_8_7( arr, file, line)
integer(kind=8), intent(in) :: arr(:,:,:,:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,iun2,i,j
integer(kind=8), allocatable :: arr_(:,:,:,:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
integer(kind=i4b) :: sumt
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    if (ionode) &
     WRITE(*,*) msg_pref,'reading integer(kind=8)(:,:,:,:,:,:,:)', shape(arr), ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='read')
    allocate(arr_, mold=arr)
    read (iun) arr_
    close(iun)
    sumt = int(sum(abs(arr_-arr)),kind=i4b)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of difference = ',sumt
    if (sumt > 1.0e-4) then
       if (ionode) &
          WRITE(*,*) msg_pref,'difference is too big: saving the computed data to '//trim(fname)//'.err'
       iun2 = find_free_unit()
       open (iun, file=trim(fname)//'.err',form='UNFORMATTED',access='STREAM',action='write')
       write (iun) arr
       close(iun)
    endif
    sumt = int(maxval(abs(arr_-arr)),kind=i4b)
    call mp_max(sumt,communicator) 
    write(*,*) msg_pref,'max of absolute value of difference = ',sumt
    sumt = int(sum(abs(arr)),kind=i4b)
    call mp_sum(sumt,communicator) 
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sumt
    deallocate(arr_)
else ! write the file
    if (ionode) &
     WRITE(*,*) msg_pref,'writing integer(kind=8)(:,:,:,:,:,:,:)', shape(arr), ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='STREAM',action='write')
    write (iun) arr
    close(iun)
end if
end subroutine
