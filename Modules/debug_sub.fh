!WARNING: THIS FILE IS AUTOMATICALLY GENERATED BY generate_debug.fh.py

subroutine checkpoint_complex_4_0( arr, file, line)
complex(kind=4), intent(in) :: arr
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
complex(kind=4), allocatable :: arr_
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading complex(kind=4)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing complex(kind=4)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_complex_4_1( arr, file, line)
complex(kind=4), intent(in) :: arr(:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
complex(kind=4), allocatable :: arr_(:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading complex(kind=4)(:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing complex(kind=4)(:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_complex_4_2( arr, file, line)
complex(kind=4), intent(in) :: arr(:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
complex(kind=4), allocatable :: arr_(:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading complex(kind=4)(:,:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing complex(kind=4)(:,:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_complex_4_3( arr, file, line)
complex(kind=4), intent(in) :: arr(:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
complex(kind=4), allocatable :: arr_(:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading complex(kind=4)(:,:,:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing complex(kind=4)(:,:,:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_complex_4_4( arr, file, line)
complex(kind=4), intent(in) :: arr(:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
complex(kind=4), allocatable :: arr_(:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading complex(kind=4)(:,:,:,:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing complex(kind=4)(:,:,:,:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_complex_4_5( arr, file, line)
complex(kind=4), intent(in) :: arr(:,:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
complex(kind=4), allocatable :: arr_(:,:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading complex(kind=4)(:,:,:,:,:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing complex(kind=4)(:,:,:,:,:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_complex_4_6( arr, file, line)
complex(kind=4), intent(in) :: arr(:,:,:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
complex(kind=4), allocatable :: arr_(:,:,:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading complex(kind=4)(:,:,:,:,:,:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing complex(kind=4)(:,:,:,:,:,:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_complex_4_7( arr, file, line)
complex(kind=4), intent(in) :: arr(:,:,:,:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
complex(kind=4), allocatable :: arr_(:,:,:,:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading complex(kind=4)(:,:,:,:,:,:,:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing complex(kind=4)(:,:,:,:,:,:,:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_complex_8_0( arr, file, line)
complex(kind=8), intent(in) :: arr
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
complex(kind=8), allocatable :: arr_
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading complex(kind=8)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing complex(kind=8)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_complex_8_1( arr, file, line)
complex(kind=8), intent(in) :: arr(:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
complex(kind=8), allocatable :: arr_(:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading complex(kind=8)(:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing complex(kind=8)(:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_complex_8_2( arr, file, line)
complex(kind=8), intent(in) :: arr(:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
complex(kind=8), allocatable :: arr_(:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading complex(kind=8)(:,:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing complex(kind=8)(:,:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_complex_8_3( arr, file, line)
complex(kind=8), intent(in) :: arr(:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
complex(kind=8), allocatable :: arr_(:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading complex(kind=8)(:,:,:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing complex(kind=8)(:,:,:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_complex_8_4( arr, file, line)
complex(kind=8), intent(in) :: arr(:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
complex(kind=8), allocatable :: arr_(:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading complex(kind=8)(:,:,:,:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing complex(kind=8)(:,:,:,:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_complex_8_5( arr, file, line)
complex(kind=8), intent(in) :: arr(:,:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
complex(kind=8), allocatable :: arr_(:,:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading complex(kind=8)(:,:,:,:,:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing complex(kind=8)(:,:,:,:,:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_complex_8_6( arr, file, line)
complex(kind=8), intent(in) :: arr(:,:,:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
complex(kind=8), allocatable :: arr_(:,:,:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading complex(kind=8)(:,:,:,:,:,:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing complex(kind=8)(:,:,:,:,:,:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_complex_8_7( arr, file, line)
complex(kind=8), intent(in) :: arr(:,:,:,:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
complex(kind=8), allocatable :: arr_(:,:,:,:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading complex(kind=8)(:,:,:,:,:,:,:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing complex(kind=8)(:,:,:,:,:,:,:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_real_4_0( arr, file, line)
real(kind=4), intent(in) :: arr
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
real(kind=4), allocatable :: arr_
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading real(kind=4)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing real(kind=4)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_real_4_1( arr, file, line)
real(kind=4), intent(in) :: arr(:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
real(kind=4), allocatable :: arr_(:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading real(kind=4)(:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing real(kind=4)(:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_real_4_2( arr, file, line)
real(kind=4), intent(in) :: arr(:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
real(kind=4), allocatable :: arr_(:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading real(kind=4)(:,:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing real(kind=4)(:,:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_real_4_3( arr, file, line)
real(kind=4), intent(in) :: arr(:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
real(kind=4), allocatable :: arr_(:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading real(kind=4)(:,:,:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing real(kind=4)(:,:,:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_real_4_4( arr, file, line)
real(kind=4), intent(in) :: arr(:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
real(kind=4), allocatable :: arr_(:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading real(kind=4)(:,:,:,:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing real(kind=4)(:,:,:,:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_real_4_5( arr, file, line)
real(kind=4), intent(in) :: arr(:,:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
real(kind=4), allocatable :: arr_(:,:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading real(kind=4)(:,:,:,:,:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing real(kind=4)(:,:,:,:,:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_real_4_6( arr, file, line)
real(kind=4), intent(in) :: arr(:,:,:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
real(kind=4), allocatable :: arr_(:,:,:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading real(kind=4)(:,:,:,:,:,:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing real(kind=4)(:,:,:,:,:,:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_real_4_7( arr, file, line)
real(kind=4), intent(in) :: arr(:,:,:,:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
real(kind=4), allocatable :: arr_(:,:,:,:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading real(kind=4)(:,:,:,:,:,:,:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing real(kind=4)(:,:,:,:,:,:,:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_real_8_0( arr, file, line)
real(kind=8), intent(in) :: arr
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
real(kind=8), allocatable :: arr_
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading real(kind=8)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing real(kind=8)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_real_8_1( arr, file, line)
real(kind=8), intent(in) :: arr(:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
real(kind=8), allocatable :: arr_(:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading real(kind=8)(:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing real(kind=8)(:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_real_8_2( arr, file, line)
real(kind=8), intent(in) :: arr(:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
real(kind=8), allocatable :: arr_(:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading real(kind=8)(:,:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing real(kind=8)(:,:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_real_8_3( arr, file, line)
real(kind=8), intent(in) :: arr(:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
real(kind=8), allocatable :: arr_(:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading real(kind=8)(:,:,:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing real(kind=8)(:,:,:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_real_8_4( arr, file, line)
real(kind=8), intent(in) :: arr(:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
real(kind=8), allocatable :: arr_(:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading real(kind=8)(:,:,:,:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing real(kind=8)(:,:,:,:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_real_8_5( arr, file, line)
real(kind=8), intent(in) :: arr(:,:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
real(kind=8), allocatable :: arr_(:,:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading real(kind=8)(:,:,:,:,:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing real(kind=8)(:,:,:,:,:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_real_8_6( arr, file, line)
real(kind=8), intent(in) :: arr(:,:,:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
real(kind=8), allocatable :: arr_(:,:,:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading real(kind=8)(:,:,:,:,:,:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing real(kind=8)(:,:,:,:,:,:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_real_8_7( arr, file, line)
real(kind=8), intent(in) :: arr(:,:,:,:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
real(kind=8), allocatable :: arr_(:,:,:,:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading real(kind=8)(:,:,:,:,:,:,:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing real(kind=8)(:,:,:,:,:,:,:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_integer_4_0( arr, file, line)
integer(kind=4), intent(in) :: arr
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
integer(kind=4), allocatable :: arr_
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading integer(kind=4)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing integer(kind=4)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_integer_4_1( arr, file, line)
integer(kind=4), intent(in) :: arr(:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
integer(kind=4), allocatable :: arr_(:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading integer(kind=4)(:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing integer(kind=4)(:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_integer_4_2( arr, file, line)
integer(kind=4), intent(in) :: arr(:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
integer(kind=4), allocatable :: arr_(:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading integer(kind=4)(:,:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing integer(kind=4)(:,:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_integer_4_3( arr, file, line)
integer(kind=4), intent(in) :: arr(:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
integer(kind=4), allocatable :: arr_(:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading integer(kind=4)(:,:,:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing integer(kind=4)(:,:,:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_integer_4_4( arr, file, line)
integer(kind=4), intent(in) :: arr(:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
integer(kind=4), allocatable :: arr_(:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading integer(kind=4)(:,:,:,:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing integer(kind=4)(:,:,:,:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_integer_4_5( arr, file, line)
integer(kind=4), intent(in) :: arr(:,:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
integer(kind=4), allocatable :: arr_(:,:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading integer(kind=4)(:,:,:,:,:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing integer(kind=4)(:,:,:,:,:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_integer_4_6( arr, file, line)
integer(kind=4), intent(in) :: arr(:,:,:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
integer(kind=4), allocatable :: arr_(:,:,:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading integer(kind=4)(:,:,:,:,:,:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing integer(kind=4)(:,:,:,:,:,:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_integer_4_7( arr, file, line)
integer(kind=4), intent(in) :: arr(:,:,:,:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
integer(kind=4), allocatable :: arr_(:,:,:,:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading integer(kind=4)(:,:,:,:,:,:,:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing integer(kind=4)(:,:,:,:,:,:,:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_integer_8_0( arr, file, line)
integer(kind=8), intent(in) :: arr
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
integer(kind=8), allocatable :: arr_
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading integer(kind=8)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing integer(kind=8)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_integer_8_1( arr, file, line)
integer(kind=8), intent(in) :: arr(:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
integer(kind=8), allocatable :: arr_(:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading integer(kind=8)(:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing integer(kind=8)(:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_integer_8_2( arr, file, line)
integer(kind=8), intent(in) :: arr(:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
integer(kind=8), allocatable :: arr_(:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading integer(kind=8)(:,:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing integer(kind=8)(:,:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_integer_8_3( arr, file, line)
integer(kind=8), intent(in) :: arr(:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
integer(kind=8), allocatable :: arr_(:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading integer(kind=8)(:,:,:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing integer(kind=8)(:,:,:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_integer_8_4( arr, file, line)
integer(kind=8), intent(in) :: arr(:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
integer(kind=8), allocatable :: arr_(:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading integer(kind=8)(:,:,:,:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing integer(kind=8)(:,:,:,:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_integer_8_5( arr, file, line)
integer(kind=8), intent(in) :: arr(:,:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
integer(kind=8), allocatable :: arr_(:,:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading integer(kind=8)(:,:,:,:,:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing integer(kind=8)(:,:,:,:,:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_integer_8_6( arr, file, line)
integer(kind=8), intent(in) :: arr(:,:,:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
integer(kind=8), allocatable :: arr_(:,:,:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading integer(kind=8)(:,:,:,:,:,:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing integer(kind=8)(:,:,:,:,:,:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine

subroutine checkpoint_integer_8_7( arr, file, line)
integer(kind=8), intent(in) :: arr(:,:,:,:,:,:,:)
character(len=64) :: fname
character(*) file
integer line
integer :: iun,reclen,i,j
integer(kind=8), allocatable :: arr_(:,:,:,:,:,:,:)
CHARACTER(LEN=6), EXTERNAL :: int_to_char
INTEGER, EXTERNAL :: find_free_unit
if ( .not. checkpoint_debug_active) then
    return
end if

counter = counter + 1
fname = trim(fname_prefix)// int_to_char(counter)
iun = find_free_unit()
inquire(iolength=reclen) arr
WRITE(*,*) msg_pref, file,':', line
if (testing) then
    WRITE(*,*) msg_pref,'reading integer(kind=8)(:,:,:,:,:,:,:)', shape(arr), reclen, ' from file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='read')
    allocate(arr_, mold=arr)
    read (iun, rec=1) arr_
    close(iun)
    write(*,*) msg_pref,'sum of absolute value of difference = ',sum(abs(arr_-arr))
    write(*,*) msg_pref,'max of absolute value of difference = ',maxval(abs(arr_-arr))
    write(*,*) msg_pref,'sum of absolute value of computed array = ',sum(abs(arr))
    deallocate(arr_)
else ! write the file
    WRITE(*,*) msg_pref,'writing integer(kind=8)(:,:,:,:,:,:,:)', shape(arr), reclen, ' on file '//trim(fname)
    open (iun, file=trim(fname),form='UNFORMATTED',access='DIRECT',recl=reclen,action='write')
    write (iun, rec=1) arr
    close(iun)
end if
end subroutine
